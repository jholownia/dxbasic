Texture2D shaderTexture;
SamplerState samplerType;

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
	float3 lightDirection;
	float padding1;
	float4 specularColor;
	float specularPower;
	float specularIntensity;	
	float padding2;
	float padding3;
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : TEXCOORD1;
	float3 viewDirection : TEXCOORD2;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	float4 textureColor = shaderTexture.Sample(samplerType, input.tex);

	// Set default output color to ambient light value for all pixels
	float4 color = ambientColor;

	// Invert the light direction for calculations.
    float3 lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    float lightIntensity = dot(input.normal, lightDir);

	// Initialize specular
	float4 specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	if (lightIntensity > 0.0f)
	{
		// Determine final diffuse color
		color += (diffuseColor * saturate(lightIntensity));

		// Saturate ambient and diffuse color
		color = saturate(color);
		
		// Calculate the reflection vector based on the light intensity, normal vector and light direction		
		float3 reflection = normalize(2 * lightIntensity * input.normal - lightDir);

		// Determine the amount of specular light based on the reflection vector, viewing direction and specular power		
		specular = specularIntensity * specularColor * pow(saturate(dot(reflection, input.viewDirection)), specularPower);
	}
	
    // Saturate the final color in case it's greater then 1
    color = saturate(color);
	
    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = color * textureColor;

	// Add the specular component
	color = saturate(color + specular);

    return color;
}